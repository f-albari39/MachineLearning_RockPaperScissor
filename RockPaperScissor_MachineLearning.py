# -*- coding: utf-8 -*-
"""Submission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jm6CKN9DSx42BB270dG0UGuRRc3X_7iY

This submission was created by Fakhri Albari (fakhrialbari1239@gmail.com)
"""

!wget --no-check-certificate \
  https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pemula_academy/rockpaperscissors.zip \
  -O /content/rockpaperscissors.zip

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import zipfile,os
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

local_zip = '/content/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

!pip install split-folders

import splitfolders
base_dir = "/content/rockpaperscissors/rps-cv-images"
splitfolders.ratio(base_dir, output="/content/rockpaperscissors/split",seed=1337, ratio=(.6,.4,))

base_dir = '/content/rockpaperscissors/split'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'val')

train_datagen = ImageDataGenerator(rescale=1./255,
                             rotation_range=20,
                             horizontal_flip=True,
                             shear_range = 0.2,
                             fill_mode = 'nearest')
valid_datagen = ImageDataGenerator(rescale=1./255,
                             rotation_range=20,
                             horizontal_flip=True,
                             shear_range = 0.2,
                             fill_mode = 'nearest')

train_generator = train_datagen.flow_from_directory(train_dir,
                                              target_size=(150, 150),
                                              batch_size=32,
                                              class_mode='categorical')
 
valid_generator = valid_datagen.flow_from_directory(validation_dir,
                                              target_size=(150, 150),
                                              batch_size=32,
                                              class_mode='categorical')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

model.fit(
      train_generator,
      steps_per_epoch=25, 
      epochs=20,
      validation_data=valid_generator,
      validation_steps=5, 
      verbose=2)

uploaded = files.upload()
 
for fn in uploaded.keys():

  path = fn
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
 
  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  
  print(fn)
  if classes[0][0] == 1:
    print("Paper")
  if classes[0][1] == 1:
    print("Rock")
  if classes[0][2] == 1:
    print("Scissors")

#Note: 
#Pengujian dilakukan dengan gambar dari rock, paper, scissors dari file zip
#Jika menggunakan foto hasil kamera, maka hasilnya akan selalu paper :(